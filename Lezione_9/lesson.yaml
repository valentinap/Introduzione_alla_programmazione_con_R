- Class: meta
  Course: R-Lang
  Lesson: Lezione 9
  Author: Valentina Porcu
  Type: Standard
  Organization: Codemotion
  Version: 2.4.3

- Class: text
  Output: Creiamo qualche grafico con le funzioni base e ggplot
  
- Class: exact_question
  Output: Carica il pacchetto ggplot con il comando library(ggplot2)
  CorrectAnswer: library(ggplot2)
  AnswerTests: omnitest(correctVal = library(ggplot2))
  Hint: library(ggplot2)

- Class: cmd_question
  Output: Crea un grafico con la funzione plot() mettendo Petal.Length sull'asse delle x e Petal.Width sull'asse delle y. Utilizza il simbolo $ per selezionare le variabili
  CorrectAnswer: plot(x= iris$Petal.Length, y=iris$Petal.Width)
  AnswerTests: omnitest(correctExpr='plot(x= iris$Petal.Length, y=iris$Petal.Width)')
  Hint: Prova con plot(x= iris$Petal.Length, y=iris$Petal.Width)
  
- Class: cmd_question
  Output: Ricrea il grafico aggiungendo il titolo "Petali"
  CorrectAnswer: plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali")
  AnswerTests: omnitest(correctExpr='plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali")')
  Hint: Prova con plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali")
  
- Class: cmd_question
  Output: Cambia il colore degli indicatori con "red"
  CorrectAnswer: plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali", col = "red")
  AnswerTests: omnitest(correctExpr='plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali", col = "red")')
  Hint: Prova con plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali", col = "red")
  
- Class: cmd_question
  Output: Aggiungi il parametro pch = 12
  CorrectAnswer: plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali", col = "red", pch = 12)
  AnswerTests: omnitest(correctExpr='plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali", col = "red", pch = 12)')
  Hint: Prova con plot(x= iris$Petal.Length, y=iris$Petal.Width, main = "Petali", col = "red", pch = 12)
  
- Class: cmd_question
  Output: Crea un istogramma con la variabile di iris Sepal.Width
  CorrectAnswer: hist(iris$Sepal.Width)
  AnswerTests: omnitest(correctExpr='hist(iris$Sepal.Width)')
  Hint: Prova con hist(iris$Sepal.Width)
  

- Class: cmd_question
  Output: Crea una tabella con la variabile Species di Iris, che chiamerai tabir
  CorrectAnswer: tabir <- table(iris$Species)
  AnswerTests: omnitest(correctExpr='tabir <- table(iris$Species)')
  Hint: Prova con tabir <- table(iris$Species)
  

- Class: cmd_question
  Output: Crea un barplot con la tabella creata. Imposta il colore come "blue"
  CorrectAnswer: barplot(tabir, col = "blue")
  AnswerTests: omnitest(correctExpr='barplot(tabir, col = "blue")')
  Hint: Prova con barplot(tabir, col = "blue")
  
- Class: cmd_question
  Output: Crea un vettore perc contenente questi valori: 20, 30, 5, 10, 12, 20, 3)
  CorrectAnswer: perc <- c(20, 30, 5, 10, 12, 20, 3)
  AnswerTests: omnitest(correctExpr='perc <- c(20, 30, 5, 10, 12, 20, 3)')
  Hint: Prova con perc <- c(20, 30, 5, 10, 12, 20, 3)

- Class: cmd_question
  Output: Crea un grafico a torta di perc utilizzando la palette heat.colors() e specificando il numero di oggetti 
  CorrectAnswer: pie(perc, col = heat.colors(7))
  AnswerTests: omnitest(correctExpr='pie(perc, col = heat.colors(7))')
  Hint: Prova con pie(perc, col = heat.colors(7))

- Class: text
  Output: Utilizziamo adesso il dataset mtcars per creare dei grafici con ggplot
  

- Class: cmd_question
  Output: Utilizziamo la funzione ggplot() e geom_point() mettendo la variabile mpg sull'asse delle x e cyl sull'asse delle y
  CorrectAnswer: ggplot(mtcars, aes(x = mpg, y = disp)) + geom_point()
  AnswerTests: omnitest(correctExpr='ggplot(mtcars, aes(x = mpg, y = disp)) + geom_point()')
  Hint: Prova con ggplot(mtcars, aes(x = mpg, y = disp)) + geom_point()

- Class: cmd_question
  Output: Al posto di geom_point() inserisci una linea di tendenza con linetype pari a 4
  CorrectAnswer: ggplot(mtcars, aes(x = mpg, y = disp)) + geom_smooth(linetype = 4)
  AnswerTests: omnitest(correctExpr='ggplot(mtcars, aes(x = mpg, y = disp)) + geom_smooth(linetype = 4)')
  Hint: Prova con ggplot(mtcars, aes(x = mpg, y = disp)) + geom_smooth(linetype = 4)

- Class: cmd_question
  Output: Utilizzando di nuovo geom_point() sulle stesse variabili inserisci le colorazioni in base alla variabile cyl
  CorrectAnswer: ggplot(mtcars, aes(x = mpg, y = disp, col = cyl)) + geom_point()
  AnswerTests: omnitest(correctExpr='ggplot(mtcars, aes(x = mpg, y = disp, col = cyl)) + geom_point()')
  Hint: Prova con ggplot(mtcars, aes(x = mpg, y = disp, col = cyl)) + geom_point()


- Class: cmd_question
  Output: Salva il grafico qua sopra nell'oggetto g1
  CorrectAnswer: g1 <- ggplot(mtcars, aes(x = mpg, y = disp, col = cyl)) + geom_point()
  AnswerTests: omnitest(correctExpr='g1 <- ggplot(mtcars, aes(x = mpg, y = disp, col = cyl)) + geom_point()')
  Hint: Prova con g1 <- ggplot(mtcars, aes(x = mpg, y = disp, col = cyl)) + geom_point()
 
- Class: cmd_question
  Output: Al grafico g1 aggiungi il parametro facet_grid(cyl~.)
  CorrectAnswer: g1 + facet_grid(cyl~.)
  AnswerTests: omnitest(correctExpr='g1 + facet_grid(cyl~.)')
  Hint: Prova con g1 + facet_grid(cyl~.)
  

- Class: cmd_question
  Output: Al grafico g1 aggiungi il parametro geom_point() inserendo il parametro shape pari a  18, il parametro size pari a 6 e il parametro alpha pari a 0.5. Il  colore deve essere "red"
  CorrectAnswer: g1 + geom_point(shape = 18, size = 6, alpha = 0.5, col = "red")
  AnswerTests: omnitest(correctExpr='g1 + geom_point(shape = 18, size = 6, alpha = 0.5, col = "red")')
  Hint: Prova con g1 + geom_point(shape = 18, size = 6, alpha = 0.5, col = "red")

- Class: text
  Output: Siamo arrivati alla fine della sezione degli esercizi! Per domande e informazioni scrivi su Datawiring.me! 












